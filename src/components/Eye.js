/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/
import { a, easings, useSpring } from '@react-spring/three';
import { useGLTF } from '@react-three/drei';
import React, { useEffect, useRef } from 'react';

export default function Eye({ floatDuration }, props) {
  const group = useRef();
  const { nodes, materials } = useGLTF('/model/MOOD/models/flippers.glb');

  const [right, rightApi] = useSpring(() => ({ position: [0, 1.26, -0.26], config: { mass: 5, tension: 100 } }), []);
  const [left, leftApi] = useSpring(() => ({ position: [0, 1.26, 0.26], config: { mass: 5, tension: 100 } }), []);
  const rotation = useSpring({
    loop: true,
    from: { rotation: [0, 0, 0] },
    to: { rotation: [0, 0, Math.PI * 2] },
    config: { mass: 5, tension: 100, duration: floatDuration * 2 },
    delay: floatDuration / 2,
  });

  const firstOptions = { easings: easings.easeOutBack, duration: floatDuration };
  const secondOptions = {
    easings: easings.easeInBack,
    duration: floatDuration,
  };
  useEffect(() => {
    let timeout;
    let floating = false;
    const bounce = () => {
      //   rotationApi.start({
      //     rotation: [0, 0, Math.PI * 2],
      //     duration: floatDuration,
      //     easings: easings.easeInOutSine,
      //   });
      if (floating) {
        rightApi.start({
          position: [0, 1.26, -0.26],
          ...firstOptions,
        });
        leftApi.start({
          position: [0, 1.26, 0.26],
          ...firstOptions,
        });
      } else {
        rightApi.start({
          position: [0, 1.6, -0.26],
          ...secondOptions,
        });
        leftApi.start({
          position: [0, 1.6, 0.26],
          ...secondOptions,
        });
      }

      floating = !floating;
      if (floating) {
        timeout = setTimeout(bounce, floatDuration * 2 - 200);
      } else {
        timeout = setTimeout(bounce, 2000);
      }
    };
    bounce();
    return () => clearTimeout(timeout);
  }, []);

  return (
    <group ref={group} {...props} dispose={null}>
      <mesh castShadow receiveShadow geometry={nodes.Cube001.geometry} material={materials.green} />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cylinder.geometry}
        material={nodes.Cylinder.material}
        position={[0, -0.42, 0]}
      >
        <mesh castShadow receiveShadow geometry={nodes.Cylinder001.geometry} material={nodes.Cylinder001.material} />
      </mesh>
      <mesh castShadow receiveShadow geometry={nodes.Cube001_1.geometry} material={materials.yellow} />
      <mesh castShadow receiveShadow geometry={nodes.Cube001_2.geometry} material={materials.moutth} />
      <a.mesh
        {...left}
        {...rotation}
        castShadow
        receiveShadow
        geometry={nodes.Sphere.geometry}
        material={nodes.Sphere.material}
        // position={[0, 1.26, 0.26]}
      />
      <a.mesh
        {...right}
        {...rotation}
        castShadow
        receiveShadow
        geometry={nodes.Sphere001.geometry}
        material={nodes.Sphere001.material}
        // position={[0, 1.26, -0.26]}
      />
    </group>
  );
}

useGLTF.preload('/model/MOOD/models/flippers.glb');
